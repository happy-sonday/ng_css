
//item-a와 item b의 공통 속성 적용

//h1,p로 인해 박스모델 간의 여백 발생할경우
h1, p{
  margin : 0;
}
//item, item-a, item-b의 부모클래스
.container{
  /* html 문서에 들여쓰기로 인한 띄어쓰기 인식으로
  item의 inline-block 속성이 적용인 안되어 적용 */
  //font-size: 0;
  //max-width: 1000px;//반응형 페이지에서 크기가 일정크기 넘어가면 더 안커지고 절대 크기1000px를 가지게 된다.
  //margin: 0 auto;//상하는 0 좌우는 크기가 넓어짐에 따라 자동으로 여백을 나눠가짐(자동 가운데 정렬

  background: pink;
}

/**부모 엘리먼트가 정상적으로 높이를 확복하기 위함**/
/**float가 적용되면 자식들이 공중에 붕뜨게 되서 없는 자식으로 인식된다
그래서 단이 있는 box모델을 가진 컨테이너가 끝나기전에 가상 엘리먼트를 생성한다. 채운다**/
.container::after{
  content:'';//div역할을 해서 내용 출력
  display: block;
  clear:both;
  height: 0;
  clear: both;
  visibility: hidden;
}
.item{
  float: left;
  //item-a와 item-b 박스모델 내부의 바깥으로 확장시켜 여백 만듦
  //width: 100%;//흔히들 많이쓰는 속성->padding 5%가 적용되서 스크롤 발생
  //width: 90%;//알아서 display block이 채워주지만 쓰고싶다면
  padding: 5%;
  // display: inline-block;//inline과 block속성을 동시에 갖고 있다
  //font-size: 1rem /*root em: 16px */



}


//section - block model
.item-a{

  //width: 30%;//box-sizing:border-box의 경우 40%
            //공통 속성 item class에 padding 5%*2=10%적용

  width: 30%;
  background-color: yellow;

}
//section - block model
.item-b{
  width: 50%;//box-sizing:border-box의 경우 60%
              //공통 속성 item class에 padding 5%*2=10%적용
  //float: right;
  background-color: yellowgreen;
}


// css item clss의 영향을 받아 옆으로 붙어버림
footer{
  //clear: left;
  clear: both;//float left right를 모두 커버할 수 있도록 설정
  background:grey ;
}


//반응형 웹디자인 각 1단 block을 가진 박스모델이 브라우저 크기가 커지면 2옆으로 붙도록 설계
